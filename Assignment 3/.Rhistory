library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect = sapply(flags,class, simplify = TRUE)
cls_vect = sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, lentgth)
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class, character(1))
?tapply()
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
iris
library(datasets)
data("mtcars")
tapply(mtcars$mpg, mtcars$cyl, mean, na.rm = TRUE)
x = tapply(mtcars$mpg, mtcars$cyl, mean, na.rm = TRUE)
str(x)
class(x)
x[1]
x[,1]
x[1][1]
x[1:3]
x[1,1:3]
class(x[1])
y = x[1]
y
y[1]
y[,1]
sapply(mtcars,cyl,mean)
?mean
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
?with
with(mtcars, lapply(mpg, mean))
with(mtcars, tapply(mpg, cyl, mean))
colnames(mtcars)
?diff
tapply(mtcars$hp, mtcars$cyl == 4, mean)
x
x[1]
x[1] + 4
names(x[1])
avg <- tapply(mtcars$hp, mtcars$cyl, mean)
avg
avg[2] - avg[8]
complete.cases(mtcars)
avg[2] - avg[3]
round(avg[3] - avg[2])
debug(ls)
ls
ls()
4
c
f
data("iris")
library(ggplot2)
install.packages("ggplot2")
library(datasets)
data(quakes)
str(quakes)
ggplot() + geom_point(data = quakes, aes(x = lat, y = long, colour = stations))
library(ggplot2)
ggplot() + geom_point(data = quakes, aes(x = lat, y = long, colour = stations))
ggplot(xlab("Lattitude"), ylab(Longitude))
ggplot(xlab("Lattitude"), ylab("Longitude"))
aes(xlab("Lattitude"))
ggplot() + geom_point(data = quakes, aes(x = lat, y = long, colour = stations, xlab("Lattitude"), ylab("Longitude"), ))
ggplot() + geom_point(data = quakes, aes(x = lat, y = long, colour = stations, xlab("Lattitude"), ylab("Longitude")))
ggplot() + geom_point(data = quakes, aes(x = lat, y = long, colour = stations))
ggplot(mapping = aes(xlab("Lattitude")))
library(lattice)
xyplot(lat,long, data = quakes)
xyplot(quakes$lat, quakes$long)
xyplot(quakes$lat)
xyplot(quakes$lat ~ quakes$long)
help(package = "base graphics")
help(package = "ggplot2")
ggplot() + geom_point(data = quakes, aes(x = lat, y = long, colour = stations))
borders(xlim = -40, ylim = 160)
install.packages("maps")
barplot(quakes$mag, quakes$stations)
Axis(at = 0, labels = TRUE)
Axis(side = 1, at = 0, labels = TRUE)
Axis(side = 2, at = 0, labels = TRUE)
plot(quakes$mag, quakes$stations)
plot(quakes$mag ~ quakes$stations)
Axis(side = 1, at = 0, labels = TRUE)
Axis(side = 3, at = 0, labels = TRUE)
Axis(side = 3, at = 20, labels = TRUE)
Axis(x = quakes$stations, side = 3, at = 20, labels = TRUE)
Axis(x = quakes$stations, side = 3, at = 20, labels = TRUE)
Axis(x = quakes$stations, side = 3, at = 30, labels = TRUE)
Axis(x = quakes$stations, side = 3, at = 10:30, labels = TRUE)
Axis(x = quakes$stations, side = 2, at = 10, labels = TRUE)
Axis(x = quakes$stations, side = 2, at = 40, labels = TRUE)
Axis(x = quakes$stations, side = 2, at = 5.3, labels = TRUE)
box()
barplot()
barplot(mtcars$cyl)
dev.off()
plot(quakes$mag ~ quakes$stations)
par(lab = c(6, 5, 4))
par(lab = c(10, 10, 4))
plot(quakes$mag ~ quakes$stations, par(lab = c(10, 10, 4)))
setwd("C:/Users/Shrikishore.Hari/Desktop/R/Assignment 3")
hospital_data <- read.csv("hospital-data.csv")
str(hospital_data)
outcomes <- read.csv("outcome-of-care-measures.csv")
str(outcomes)
View(outcomes)
View(hospital_data)
table(hospital_data$ZIP.Code)
table(hospital_data$Emergency.Services)
table(hospital_data$City)
length(unique(hospital_data$City))
length(unique(hospital_data$County))
length(unique(hospital_data$State))
length(unique(hospital_data$Hospital.Ownership))
install.packages("rmarkdown")
library(rmarkdown)
dev.off()
install.packages("KernSmooth")
library(KernSmooth)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(pressure)
