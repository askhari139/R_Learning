?lm
lm
message("Hello")
"hello"
b <- message("Hello")
b
a = message("Hello")
a
a
offsprings <- matrix(rep(0, (n_sites*2*max(length(chr1), length(chr2)))),
nrow = n_sites*2)
n_sites <- 3
n_sites <- 3
offsprings <- matrix(rep(0, (n_sites*2*max(length(chr1), length(chr2)))),
nrow = n_sites*2)
offsprings <- matrix(rep(0, (n_sites*2*10)),
nrow = n_sites*2)
any(apply(offsprings, 1, sum) == 0
)
apply(offsprings, 1, sum) == 0
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/functions.R')
chr1 <- c(0,0,0,0,0,1,0,0,0,0,0)
chr1 <- c(0,1,0,0,0,0,0,0,0,0,0)
chr2 <- c(0,0,1,0,0,0,0,0,0,0,0)
crossover(3, chr1, chr2)
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/functions.R')
crossover(3, chr1, chr2)
View(offsprings)
crossover(3, chr1, chr2)
crossover(3, chr1, chr2)
crossover(3, chr1, chr2)
crossover(3, chr1, chr2)
crossover(3, chr1, chr2)
n
n
n
n
n
n
n
n
n
n
n
n
crossover(3, chr1, chr2)
crossover(3, chr1, chr2)
View(offsprings)
View(offsprings)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
p <- lm(y ~ x)
p
View(p)
class(p)
attributes(p)
p$coefficients
p$residuals
y - p$residuals
test1 <- y - p$residuals
test2 <- x*(p$coefficients[2]) + p$coefficients[1]
test2 == test1
test2
p <- lm(y ~ 0 + x)
p
data("mtcars")
lm(weight ~ mpg, mtcars)
lm(formula = mpg ~ weight, data = mtcars)
mtcars
lm(wt ~ mpg, mtcars)
lm(mpg ~ wt, mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
lm(y ~ x)
attr(p)
attributes(p)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
p <- lm(y ~ x)
p$df.residual
sd(p$residuals)
deviance(p)
library("genalg")
library("parallel")
library("pROC")
library("rminer")
source("C:\\Users\\Shrikishore.Hari\\Desktop\\R\\genalg_imran\\SubjAnaFuncs_GA.r")
chrmLen <- 147    # the number of genes in the chromosome
minVals <- rep(0, chrmLen)
maxVals <- rep(1, chrmLen)
popSiz <- 100
iterGA <- 1
probMutation <- 1/chrmLen
nElit <- ceiling(0.05*popSiz)
thnDat <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/genalg_imran/thinSafety.rds")
View(thnDat)
featdf <- subset(thnDat, select = grep("feat", colnames(thnDat)))
View(featdf)
ids <- aggregate(safVFS ~ id, sum, data = thnDat)
?aggregate
?manipulate
install.packages("manipulate")
library(manipulate)
library(datasets)
data("mtcars")
source('~/.active-rstudio-document')
library(UsingR)
data("galton")
summary(galton)
source('~/.active-rstudio-document')
install.packages("shiny")
library(shiny)
data("mtcars")
fit <- lm(data = mtcars)
View(mtcars)
fit <- lm(data = mtcars, mpg ~ wt)
fit
df_candidate <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/genalg_imran/thinSafety.rds")
featdf <- cbind.data.frame(
subset(df_candidate, select = grep("feat", colnames(df_candidate))),
df_candidate$class)
View(featdf)
class(featdf$feat.1)
featdf$`df_candidate$class`
featdf <- cbind.data.frame(
subset(df_candidate, select = grep("feat", colnames(df_candidate))),
class <- df_candidate$class)
featdf <- #cbind.data.frame(
subset(df_candidate, select = grep(c("feat", "class"), colnames(df_candidate))),
#class <- df_candidate$class)
}
featdf <- #cbind.data.frame(
subset(df_candidate, select = grep(c("feat", "class"), colnames(df_candidate)))
featdf <- #cbind.data.frame(
subset(df_candidate, select = grep(c("feat", "class"), colnames(df_candidate)))
featdf <- cbind.data.frame(
subset(df_candidate, select = grep(c("feat", "class"), colnames(df_candidate))),
class = df_candidate$class)
featdf <- cbind.data.frame(
subset(df_candidate, select = grep("feat", colnames(df_candidate))),
class = df_candidate$class)
x <- featdf$feat.1
source('~/.active-rstudio-document')
class_p_value(x)
p_func <- function(x)
{
c1 <- x[which(featdf$class == 1)]
c0 <- x[which(featdf$class == 0)]
return(t.test(c0, c1, alternative = "greater", conf.level = 0.975)$p.value)
}
p_func(x)
p_func <- function(x)
{
c1 <- x[which(featdf$class == 1)]
c0 <- x[which(featdf$class == 0)]
return(t.test(c0, c1, alternative = "lesser", conf.level = 0.975)$p.value)
}
p_func(x)
p_func <- function(x)
{
c1 <- x[which(featdf$class == 1)]
c0 <- x[which(featdf$class == 0)]
return(t.test(c0, c1, alternative = "less", conf.level = 0.975)$p.value)
}
p_func(x)
p_func(x) - 1
apply(featdf[, -ncol(featdf)], 2, p_func)
source('~/.active-rstudio-document')
class_p_value(df_candidate = df_candidate)
result <- class_p_value(df_candidate = df_candidate)
max(result)
which.max(result)
which.min(result)
which(result < 0.025)
length(which(result < 0.025))
library(shiny); runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/test.R')
library(siny)
library(shiny)
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/test.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/test.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/Dean_attali_app')
faithful
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/Dean_attali_app')
thnDat <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/thnEffData.rds")
View(thnDat)
library("parallel")
library("pROC")
library("rminer")
library("GA")
install.packages("GA")
library("GA")
library('doRNG')
install.packages("doRNG")
library('doRNG')
chrmLen <- 30    # the number of genes in the chromosome
minVals <- rep(0, chrmLen)
maxVals <- rep(1, chrmLen)
popSiz <- 20
iterGA <- 10
probMutation <- 1/chrmLen
nElit <- ceiling(0.05*popSiz)
wtModel <- 1.0
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/thnEffData.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
dim(featdf)
ids <- aggregate(saf ~ id, sum, data = thnDat01)
ids$ids <- as.character(ids$id)
ids.p <- as.character(ids$id[which(ids$saf > 0)]) # any bolus problem means patient belongs to idsP
ids.h <- as.character(ids$id[which(ids$saf == 0)])
n.trn.p <- (80/100)*length(ids.p)
n.trn.h <- (80/100)*length(ids.h)
numSims <- 100
seqSims <- 1:numSims
chromosome <- sample(c(0,1), replace = T, 30)
length(chromosome)
sum(chromosome)
modDat <- subset(thnDat01, select = c(id, bolus, class, saf, which(chromosome == 1)))
formula <- formula(paste("class ~ ", paste(colnames(modDat)[grep("feat", colnames(modDat))],
sep = ".", collapse = "+")))
formula
aucTest <- vector(mode = "double", length = numSims)
i <- 1
trn.i.p <- sample(ids.p, n.trn.p)
test.i.p <- ids.p[which(!ids.p %in% trn.i.p)]
trn.i.h <- sample(ids.h, n.trn.h)
test.i.h <- ids.h[which(!ids.h %in% trn.i.h)]
trn <- subset(modDat, id %in% c(trn.i.p, trn.i.h))
test <- subset(modDat, id %in% c(test.i.p, test.i.h))
featCols <- grep("feat", names(modDat))
test[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (test[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(test), ncol = length(featCols))
trn[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (trn[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(trn), ncol = length(featCols))
lda.0 <- rminer::fit(formula, data = trn, model = "lda", task = "p", prior = c(0.5, 0.5))
pred.trn <- rminer::predict(lda.0, trn)
predPrb.trn <- pred.trn[, 2]  # the 2nd column lists the probability of
p.trn.h <- predPrb.trn[which(trn$class == 0)]
th <- p.trn.h[order(p.trn.h, decreasing = FALSE)][ceiling(0.6*length(p.trn.h))]
pred.test <- rminer::predict(lda.0, test)
predPrb.test <- pred.test[, 2]
aucTest[i] <- pROC::auc(test$class, predPrb.test)
aucTest[1]
eval_GA <- function(chromosome)
{
# modDat <- cbind.data.frame(thnDat[, 1:4], subset(featdf, select = which(chromosome == 1)), thnDat[, 152:153])
modDat <- subset(thnDat01, select = c(id, bolus, class, saf, which(chromosome == 1)))
formula <- formula(paste("class ~ ", paste(colnames(modDat)[grep("feat", colnames(modDat))],
sep = ".", collapse = "+")))
aucTest <- vector(mode = "double", length = numSims)
for (i in seqSims)
{
# aucTest[i] <- runLDA(i, data = modDat, formu = formula, ids.p, ids.h, n.trn.p, n.trn.h,
#                    bolType = "thin", rollMethod = "mean", quantPar = 0.75)
# Define balanced training/test subsets
trn.i.p <- sample(ids.p, n.trn.p)
test.i.p <- ids.p[which(!ids.p %in% trn.i.p)]
trn.i.h <- sample(ids.h, n.trn.h)
test.i.h <- ids.h[which(!ids.h %in% trn.i.h)]
trn <- subset(modDat, id %in% c(trn.i.p, trn.i.h))
test <- subset(modDat, id %in% c(test.i.p, test.i.h))
# feature normalisation
featCols <- grep("feat", names(modDat))
test[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (test[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(test), ncol = length(featCols))
trn[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (trn[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(trn), ncol = length(featCols))
# Fit lda model on the training data
lda.0 <- rminer::fit(formula, data = trn, model = "lda", task = "p", prior = c(0.5, 0.5))
pred.trn <- rminer::predict(lda.0, trn)
predPrb.trn <- pred.trn[, 2]  # the 2nd column lists the probability of
# each observation being in class = 1
p.trn.h <- predPrb.trn[which(trn$class == 0)]
th <- p.trn.h[order(p.trn.h, decreasing = FALSE)][ceiling(0.6*length(p.trn.h))]
# use the trained model for prediction on the test set
pred.test <- rminer::predict(lda.0, test)
predPrb.test <- pred.test[, 2]
aucTest[i] <- pROC::auc(test$class, predPrb.test)
}
meanAUC <- mean(aucTest)
fitVal <- (wtModel*meanAUC) + ((1 - wtModel) * (1 - (sum(chromosome)/length(chromosome))))
return(fitVal)
}
nElit
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
type <- "binary"
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
install.packages("doParallel")
library(doParallel)
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
popSiz <- 75
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
popSiz <- 100
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
popSiz <- 150
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
iterGA <- 30
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
popSiz <- 100
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
save.image("~/z.RData")
save.image("C:/Users/Shrikishore.Hari/Desktop/z1.RData")
save.image("C:/Users/Shrikishore.Hari/Desktop/z.RData")
saveRDS(z)
saveRDS(z, file = "pop100gen30.rds")
iterGA <- 20
popSiz <- 100
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.5, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
popSiz <- 150
iterGA <- 40
saveRDS(z, file = "pop100gen20mut50")
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.5, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
library("memoise")
mga <- memoise(ga)
popSiz <- 50
iterGA <- 10
z <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
z
z$bestsol
str(z)
saveRDS(z, file = "pop150_gen40.rds")
class(mga)
z@bestSol
x <- z@bestSol
x <- unlist(z@bestSol)
x <- sa.matrix(z@bestSol)
x <- as.matrix(z@bestSol)
x <- matrix(unlist(z@bestSol), ncol = 30)
View(x)
mga <- memoise(ga)
source('~/.active-rstudio-document')
fc <- cache_filesystem("~/test.cache")
mga <- memoise(ga, cache = fc)
strt <- as.vector(proc.time()[3])
x <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
strt <- as.vector(proc.time()[3])
x <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
x <- z@bestSol
strt <- as.vector(proc.time()[3])
x <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
y <- x@bestSol
x@population
y <- x@population
y <- x@summary
y <- x@solution
View(y)
x
x@summary
y <- x@population
iterGA <- 20
strt <- as.vector(proc.time()[3])
x20 <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = gaControl(type)$crossover,
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
library(readr)
bcl_data <- read_csv("http://deanattali.com/files/bcl-data.csv")
View(bcl_data)
str(bcl_data)
setwd("C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/Dean_attali_app")
bcl <- read.csv("C:/Users/Shrikishore.Hari/Desktop/R/shiny/deanattali/Dean_attali_app/bcl-data.csv",
stringsAsFactors = FALSE)
identical(bcl, bcl_data)
str(bcl)
shiny::runApp()
runApp()
hist(bcl$Alcohol_Content)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(Prices ~ Alcohol_content, bcl)
plot(bcl$Alcohol_Content, bcl$Price)
runApp()
plot(bcl$Alcohol_Content, bcl$Price, log = "X")
plot(bcl$Alcohol_Content, bcl$Price, log = y)
plot(bcl$Alcohol_Content, bcl$Price, log = "y")
runApp()
shiny
?shiny
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/table_print.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/reactive.R')
?switch
library(datasets)
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/reactive.R')
rock
?rock
colnames(mtcars)
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/mpg_display.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/mpg_display.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/mpg_display.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/mpg_display.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/mpg_display.R')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/shiny/Github/mpg_display.R')
plot(mpg ~ cyl, mtcars)
boxplot(mpg ~ cyl, mtcars)
runApp()
