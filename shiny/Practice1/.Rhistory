ids$ids <- as.character(ids$id)
ids.p <- as.character(ids$id[which(ids$saf > 0)]) # any bolus problem means patient belongs to idsP
ids.h <- as.character(ids$id[which(ids$saf == 0)])
n.trn.p <- (80/100)*length(ids.p)
n.trn.h <- (80/100)*length(ids.h)
numSims <- 100
seqSims <- 1:numSims
eval_GA <- function(chromosome)
{
# modDat <- cbind.data.frame(thnDat[, 1:4], subset(featdf, select = which(chromosome == 1)), thnDat[, 152:153])
modDat <- subset(thnDat01, select = c(id, bolus, class, saf, which(chromosome == 1)))
formula <- formula(paste("class ~ ", paste(colnames(modDat)[grep("feat", colnames(modDat))],
sep = ".", collapse = "+")))
aucTest <- vector(mode = "double", length = numSims)
for (i in seqSims)
{
# aucTest[i] <- runLDA(i, data = modDat, formu = formula, ids.p, ids.h, n.trn.p, n.trn.h,
#                    bolType = "thin", rollMethod = "mean", quantPar = 0.75)
# Define balanced training/test subsets
trn.i.p <- sample(ids.p, n.trn.p)
test.i.p <- ids.p[which(!ids.p %in% trn.i.p)]
trn.i.h <- sample(ids.h, n.trn.h)
test.i.h <- ids.h[which(!ids.h %in% trn.i.h)]
trn <- subset(modDat, id %in% c(trn.i.p, trn.i.h))
test <- subset(modDat, id %in% c(test.i.p, test.i.h))
# feature normalisation
featCols <- grep("feat", names(modDat))
test[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (test[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(test), ncol = length(featCols))
trn[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (trn[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(trn), ncol = length(featCols))
# Fit lda model on the training data
lda.0 <- rminer::fit(formula, data = trn, model = "lda", task = "p", prior = c(0.5, 0.5))
pred.trn <- rminer::predict(lda.0, trn)
predPrb.trn <- pred.trn[, 2]  # the 2nd column lists the probability of
# each observation being in class = 1
p.trn.h <- predPrb.trn[which(trn$class == 0)]
th <- p.trn.h[order(p.trn.h, decreasing = FALSE)][ceiling(0.6*length(p.trn.h))]
# use the trained model for prediction on the test set
pred.test <- rminer::predict(lda.0, test)
predPrb.test <- pred.test[, 2]
aucTest[i] <- pROC::auc(test$class, predPrb.test)
}
meanAUC <- mean(aucTest)
fitVal <- (wtModel*meanAUC) + ((1 - wtModel) * (1 - (sum(chromosome)/length(chromosome))))
return(fitVal)
}
strt <- as.vector(proc.time()[3])
z <- ga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = "gabin_uCrossover",
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
saveRDS(z, file = "ucross_pop50_gen20.rds")
popSiz <- 75
# library("genalg")
library("parallel")
library("pROC")
library("rminer")
library("GA")
library('doRNG')
library("memoise")
# source("F:\\SONAR\\Feature Selection\\GA\\SubjAnaFuncs_GA.r")
chrmLen <- 30    # the number of genes in the chromosome
minVals <- rep(0, chrmLen)
maxVals <- rep(1, chrmLen)
popSiz <- 75
iterGA <- 20
probMutation <- 1/chrmLen
nElit <- ceiling(0.05*popSiz)
wtModel <- 1.0
# read the data
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/thnEffData.rds")
# featdf <- subset(thnDat, select = grep("feat", colnames(thnDat)))
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
# set ids
# ids <- aggregate(safVFS ~ id, sum, data = thnDat)
ids <- aggregate(saf ~ id, sum, data = thnDat01)
ids$ids <- as.character(ids$id)
ids.p <- as.character(ids$id[which(ids$saf > 0)]) # any bolus problem means patient belongs to idsP
ids.h <- as.character(ids$id[which(ids$saf == 0)])
n.trn.p <- (80/100)*length(ids.p)
n.trn.h <- (80/100)*length(ids.h)
numSims <- 100
seqSims <- 1:numSims
eval_GA <- function(chromosome)
{
# modDat <- cbind.data.frame(thnDat[, 1:4], subset(featdf, select = which(chromosome == 1)), thnDat[, 152:153])
modDat <- subset(thnDat01, select = c(id, bolus, class, saf, which(chromosome == 1)))
formula <- formula(paste("class ~ ", paste(colnames(modDat)[grep("feat", colnames(modDat))],
sep = ".", collapse = "+")))
aucTest <- vector(mode = "double", length = numSims)
for (i in seqSims)
{
# aucTest[i] <- runLDA(i, data = modDat, formu = formula, ids.p, ids.h, n.trn.p, n.trn.h,
#                    bolType = "thin", rollMethod = "mean", quantPar = 0.75)
# Define balanced training/test subsets
trn.i.p <- sample(ids.p, n.trn.p)
test.i.p <- ids.p[which(!ids.p %in% trn.i.p)]
trn.i.h <- sample(ids.h, n.trn.h)
test.i.h <- ids.h[which(!ids.h %in% trn.i.h)]
trn <- subset(modDat, id %in% c(trn.i.p, trn.i.h))
test <- subset(modDat, id %in% c(test.i.p, test.i.h))
# feature normalisation
featCols <- grep("feat", names(modDat))
test[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (test[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(test), ncol = length(featCols))
trn[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (trn[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(trn), ncol = length(featCols))
# Fit lda model on the training data
lda.0 <- rminer::fit(formula, data = trn, model = "lda", task = "p", prior = c(0.5, 0.5))
pred.trn <- rminer::predict(lda.0, trn)
predPrb.trn <- pred.trn[, 2]  # the 2nd column lists the probability of
# each observation being in class = 1
p.trn.h <- predPrb.trn[which(trn$class == 0)]
th <- p.trn.h[order(p.trn.h, decreasing = FALSE)][ceiling(0.6*length(p.trn.h))]
# use the trained model for prediction on the test set
pred.test <- rminer::predict(lda.0, test)
predPrb.test <- pred.test[, 2]
aucTest[i] <- pROC::auc(test$class, predPrb.test)
}
meanAUC <- mean(aucTest)
fitVal <- (wtModel*meanAUC) + ((1 - wtModel) * (1 - (sum(chromosome)/length(chromosome))))
return(fitVal)
}
fc <- cache_filesystem("~/test.cache")
mga <- memoise(ga, cache = fc)
strt <- as.vector(proc.time()[3])
z <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = "gabin_uCrossover",
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
dur <- as.vector(proc.time()[3]) - strt
saveRDS(z, file = "ucross_pop75_gen20.rds")
popSiz <- 100
z <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
+         selection = gaControl(type)$selection, crossover = "gabin_uCrossover",
+         mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
+         pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
+         names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
+         monitor = plot, seed = 12345, elitism = nElit)
z <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = "gabin_uCrossover",
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
saveRDS(z, file = "ucross_pop100_gen20.rds")
iterGA <- 30
z <- mga(type = "binary", fitness = eval_GA, nBits = chrmLen, population = gaControl(type)$population,
selection = gaControl(type)$selection, crossover = "gabin_uCrossover",
mutation = gaControl(type)$mutation, popSize = popSiz, pcrossover = 0.8,
pmutation = 0.1, maxiter = iterGA, maxFitness = 1.0,
names = names(thnDat01)[grep("feat", names(thnDat01))], keepBest = TRUE, parallel = 3,
monitor = plot, seed = 12345, elitism = nElit)
saveRDS(z, file = "ucross_pop100_gen30.rds")
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/thnEffData.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
thnDat <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/R/genalg_imran/thinSafety.rds")
featdf <- subset(thnDat, select = grep("feat", colnames(thnDat)))
View(featdf)
ftmat <- as.matrix(featdf)
x <- cor(ftmat)
View(x)
sum(x>05)
sum(x>0.5)
x>0.5
(1663-147)/2
758/(147*147)
which(x > 0.5 & x != 1)
x <- as.data.frame(x)
which(x > 0.5 && x != 1)
x > 0.5
sum(x > 0.5)
y <- lower.tri(x)
View(y)
x <- as.matrix(x)
z <- x(x > 0.5 & lower.tri(x))
x
z <- x[x > 0.5 & lower.tri(x)]
z <- which(x > 0.5 & lower.tri(x))
z
floor(2.5)
reminder(5/2)
5/2
x[2]
View(x)
corrMat <- cor(featdf)
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
threshold <- 0.5
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
View(corrMat)
n <- 10
for(i in 1:n)
{}
for(i in 1:n)
n <- n -1
corrPairs <- matrix(unlist(corrPairs), ncol = 2)
which(corrPairs[, 1] == 3)
which(corrPairs[ 1, ] == 3)
View(corrPairs)
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- matrix(unlist(corrPairs), nrow = 2)
View(corrPairs)
n <- 10
for ( i in 1:n){
print(i)
n <- n - 1
}
n <- 10
while(i < n) {
print(i)
n <- n - 1
}
i <- 1
while(i < n) {
print(i)
n <- n - 1
}
n <- 10
i <- 1
while(i < n) {
print(i)
n <- n - 1
i <- i + 1
}
corrPairs <- t(corrPairs)
which(corrPairs[, 1] == 3)
View(corrPairs)
i <- 1
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
View(corrPairs)
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
View(corrPairs)
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
while(i < nrow(corrPairs))
{
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
}
uncorr <- function(df_candidate, threshold = 0.5)
{
featdf <- subset(df_candidate, select = grep("feat", colnames(df_candidate)))
corrMat <- cor(featdf)
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
}
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
while(i < nrow(corrPairs))
{
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
}
View(corrPairs)
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
View(corrPairs)
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
while(i < nrow(corrPairs))
{
browser()
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
}
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
while(i < n))
{
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
}
View(corrPairs)
unique(corrPairs[, 1])
unique(corrPairs[, 2])
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs[i,2]
which(corrPairs[, 1] == corrPairs[i, 2])
corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
corrPairs[(corrPairs[, 1] == corrPairs[i, 2]), ]
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
if(dummy > 0)
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
i < n
if(dummy > 0)
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
while(i < n)
{
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
if(dummy > 0)
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
}
unique(corrPairs[, 1])
corrPairs <- sapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- sapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thnEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/functions.R')
uncorr(thnDat01, 0.5)
uncorr(thnDat01, 0.8)
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/functions.R')
grep("feat", colnames(thnDat01))
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
grep("feat", colnames(thnDat01))
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
featdf <- featdf[, uncorr(thnDat01, 0.5)]
thnDat01 <- cbind.data.frame(thnDat01[, -grep("feat", colnames(thnDat01))], featdf)
View(thnDat01)
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
View(thnDat)
View(thnDat01)
thnDat02 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
View(thnDat02)
thnDat02$class
saveRDS(thnDat01, file = "uncorr_thneffdata.rds")
gaControl("binary")$selection
library(UsingR)
data(galton)
melt(galton)
install.packages()
install.packages("reshape")
?melt
library(reshape)
?melt
melt(galton)
x <- melt(galton)
View(galton)
View(x)
View(galton)
profvis::profvis({z_list <- list(ga())})
library("parallel")
library("pROC")
library("rminer")
library("GA")
library('doRNG')
chrmLen <- 30    # the number of genes in the chromosome
minVals <- rep(0, chrmLen)
maxVals <- rep(1, chrmLen)
popSiz <- 100
iterGA <- 10
probMutation <- 1/chrmLen
nElit <- ceiling(0.05*popSiz)
wtModel <- 1.0
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
featdf <- featdf[, uncorr(thnDat01, 0.5)]
thnDat01 <- cbind.data.frame(thnDat01[, -grep("feat", colnames(thnDat01))], featdf)
ids <- aggregate(saf ~ id, sum, data = thnDat01)
ids$ids <- as.character(ids$id)
ids.p <- as.character(ids$id[which(ids$saf > 0)]) # any bolus problem means patient belongs to idsP
ids.h <- as.character(ids$id[which(ids$saf == 0)])
n.trn.p <- (80/100)*length(ids.p)
n.trn.h <- (80/100)*length(ids.h)
numSims <- 100
seqSims <- 1:numSims
eval_GA <- function(chromosome)
{
# modDat <- cbind.data.frame(thnDat[, 1:4], subset(featdf, select = which(chromosome == 1)), thnDat[, 152:153])
modDat <- subset(thnDat01, select = c(id, bolus, class, saf, which(chromosome == 1)))
formula <- formula(paste("class ~ ", paste(colnames(modDat)[grep("feat", colnames(modDat))],
sep = ".", collapse = "+")))
aucTest <- vector(mode = "double", length = numSims)
for (i in seqSims)
{
# aucTest[i] <- runLDA(i, data = modDat, formu = formula, ids.p, ids.h, n.trn.p, n.trn.h,
#                    bolType = "thin", rollMethod = "mean", quantPar = 0.75)
# Define balanced training/test subsets
trn.i.p <- sample(ids.p, n.trn.p)
test.i.p <- ids.p[which(!ids.p %in% trn.i.p)]
trn.i.h <- sample(ids.h, n.trn.h)
test.i.h <- ids.h[which(!ids.h %in% trn.i.h)]
trn <- subset(modDat, id %in% c(trn.i.p, trn.i.h))
test <- subset(modDat, id %in% c(test.i.p, test.i.h))
# feature normalisation
featCols <- grep("feat", names(modDat))
test[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (test[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(test), ncol = length(featCols))
trn[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (trn[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(trn), ncol = length(featCols))
# Fit lda model on the training data
lda.0 <- rminer::fit(formula, data = trn, model = "lda", task = "p", prior = c(0.5, 0.5))
pred.trn <- rminer::predict(lda.0, trn)
predPrb.trn <- pred.trn[, 2]  # the 2nd column lists the probability of
# each observation being in class = 1
p.trn.h <- predPrb.trn[which(trn$class == 0)]
th <- p.trn.h[order(p.trn.h, decreasing = FALSE)][ceiling(0.6*length(p.trn.h))]
# use the trained model for prediction on the test set
pred.test <- rminer::predict(lda.0, test)
predPrb.test <- pred.test[, 2]
aucTest[i] <- pROC::auc(test$class, predPrb.test)
}
meanAUC <- mean(aucTest)
fitVal <- (wtModel*meanAUC) + ((1 - wtModel) * (1 - (sum(chromosome)/length(chromosome))))
return(fitVal)
}
z_list <- list(ga())
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
summ <- rbind(z_list[[1]]@summary, z_list[[2]]@summary, z_list[[3]]@summary)
summ
plot(1:30, summ[, 1])
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
library(shiny); runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Github/anim.R')
?animationOptions
install.packages("tidyverse")
setwd("C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?read.table
runApp()
runApp()
runApp()
runApp('file_input.R')
runApp()
