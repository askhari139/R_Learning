dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
}
View(corrPairs)
unique(corrPairs[, 1])
unique(corrPairs[, 2])
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
corrPairs[i,2]
which(corrPairs[, 1] == corrPairs[i, 2])
corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
corrPairs[(corrPairs[, 1] == corrPairs[i, 2]), ]
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
if(dummy > 0)
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
i < n
if(dummy > 0)
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
corrPairs <- lapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- t(matrix(unlist(corrPairs), nrow = 2))
i <- 1
n <- nrow(corrPairs)
while(i < n)
{
dummy <- sum(corrPairs[, 1] == corrPairs[i, 2])
if(dummy > 0)
corrPairs <- corrPairs[-which(corrPairs[, 1] == corrPairs[i, 2]), ]
i <- i + 1
n <- n - dummy
}
unique(corrPairs[, 1])
corrPairs <- sapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
corrPairs <- sapply(which(corrMat > threshold & lower.tri(corrMat)), function(x)
{c(ceiling(x/ncol(featdf)), x - ncol(featdf)*(ceiling(x/ncol(featdf)-1)))})
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thnEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/functions.R')
uncorr(thnDat01, 0.5)
uncorr(thnDat01, 0.8)
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/functions.R')
grep("feat", colnames(thnDat01))
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
grep("feat", colnames(thnDat01))
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
featdf <- featdf[, uncorr(thnDat01, 0.5)]
thnDat01 <- cbind.data.frame(thnDat01[, -grep("feat", colnames(thnDat01))], featdf)
View(thnDat01)
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
View(thnDat)
View(thnDat01)
thnDat02 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
View(thnDat02)
thnDat02$class
saveRDS(thnDat01, file = "uncorr_thneffdata.rds")
gaControl("binary")$selection
library(UsingR)
data(galton)
melt(galton)
install.packages()
install.packages("reshape")
?melt
library(reshape)
?melt
melt(galton)
x <- melt(galton)
View(galton)
View(x)
View(galton)
profvis::profvis({z_list <- list(ga())})
library("parallel")
library("pROC")
library("rminer")
library("GA")
library('doRNG')
chrmLen <- 30    # the number of genes in the chromosome
minVals <- rep(0, chrmLen)
maxVals <- rep(1, chrmLen)
popSiz <- 100
iterGA <- 10
probMutation <- 1/chrmLen
nElit <- ceiling(0.05*popSiz)
wtModel <- 1.0
thnDat01 <- readRDS(file = "C:/Users/Shrikishore.Hari/Desktop/thinEfficiency.rds")
featdf <- subset(thnDat01, select = grep("feat", colnames(thnDat01)))
featdf <- featdf[, uncorr(thnDat01, 0.5)]
thnDat01 <- cbind.data.frame(thnDat01[, -grep("feat", colnames(thnDat01))], featdf)
ids <- aggregate(saf ~ id, sum, data = thnDat01)
ids$ids <- as.character(ids$id)
ids.p <- as.character(ids$id[which(ids$saf > 0)]) # any bolus problem means patient belongs to idsP
ids.h <- as.character(ids$id[which(ids$saf == 0)])
n.trn.p <- (80/100)*length(ids.p)
n.trn.h <- (80/100)*length(ids.h)
numSims <- 100
seqSims <- 1:numSims
eval_GA <- function(chromosome)
{
# modDat <- cbind.data.frame(thnDat[, 1:4], subset(featdf, select = which(chromosome == 1)), thnDat[, 152:153])
modDat <- subset(thnDat01, select = c(id, bolus, class, saf, which(chromosome == 1)))
formula <- formula(paste("class ~ ", paste(colnames(modDat)[grep("feat", colnames(modDat))],
sep = ".", collapse = "+")))
aucTest <- vector(mode = "double", length = numSims)
for (i in seqSims)
{
# aucTest[i] <- runLDA(i, data = modDat, formu = formula, ids.p, ids.h, n.trn.p, n.trn.h,
#                    bolType = "thin", rollMethod = "mean", quantPar = 0.75)
# Define balanced training/test subsets
trn.i.p <- sample(ids.p, n.trn.p)
test.i.p <- ids.p[which(!ids.p %in% trn.i.p)]
trn.i.h <- sample(ids.h, n.trn.h)
test.i.h <- ids.h[which(!ids.h %in% trn.i.h)]
trn <- subset(modDat, id %in% c(trn.i.p, trn.i.h))
test <- subset(modDat, id %in% c(test.i.p, test.i.h))
# feature normalisation
featCols <- grep("feat", names(modDat))
test[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (test[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(test), ncol = length(featCols))
trn[, featCols] <- matrix(unlist(lapply(featCols, FUN = function(x) (trn[, x] - min(trn[, x]))/(max(trn[, x]) - min(trn[, x])))),
nrow = nrow(trn), ncol = length(featCols))
# Fit lda model on the training data
lda.0 <- rminer::fit(formula, data = trn, model = "lda", task = "p", prior = c(0.5, 0.5))
pred.trn <- rminer::predict(lda.0, trn)
predPrb.trn <- pred.trn[, 2]  # the 2nd column lists the probability of
# each observation being in class = 1
p.trn.h <- predPrb.trn[which(trn$class == 0)]
th <- p.trn.h[order(p.trn.h, decreasing = FALSE)][ceiling(0.6*length(p.trn.h))]
# use the trained model for prediction on the test set
pred.test <- rminer::predict(lda.0, test)
predPrb.test <- pred.test[, 2]
aucTest[i] <- pROC::auc(test$class, predPrb.test)
}
meanAUC <- mean(aucTest)
fitVal <- (wtModel*meanAUC) + ((1 - wtModel) * (1 - (sum(chromosome)/length(chromosome))))
return(fitVal)
}
z_list <- list(ga())
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
summ <- rbind(z_list[[1]]@summary, z_list[[2]]@summary, z_list[[3]]@summary)
summ
plot(1:30, summ[, 1])
source('C:/Users/Shrikishore.Hari/Desktop/R/Assignment_GA_imran/Efficiency_GA_alg/featureOptim_GA.r')
library(shiny); runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Github/anim.R')
?animationOptions
install.packages("tidyverse")
shiny::runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
library(shiny)
library(dplyr)
shinyServer(function(input, output) {browser()
output$head <- renderTable(
req(input$file1),
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote),
if (input$disp == "head") {
return(head(df))
}
else
return(df)
)
#output$cols <- renderPrint(req(input$file1), colnames(output$head))
})
shinyUI(browser(),
fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("head")
#selectInput(inputId = "columns",
#label = "Column names in the file",
#choices = "output.cols")
)
)))
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
output$head <- renderTable(
req(input$file1),
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote),
if (input$disp == "head") {
return(head(df))
}
else
return(df)
)
library(shiny)
library(dplyr)
shinyUI(
fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("head")
#selectInput(inputId = "columns",
#label = "Column names in the file",
#choices = "output.cols")
)
)))
library(shiny)
library(dplyr)
shinyServer(function(input, output) {
output$head <- renderTable(
req(input$file1),
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote),
if (input$disp == "head") {
return(head(df))
}
else
return(df)
)
#output$cols <- renderPrint(req(input$file1), colnames(output$head))
})
output$head <- renderTable(
req(input$file1),
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote),
if (input$disp == "head") {
return(head(df))
}
else
return(df)
)
shinyServer(function(input, output) {
output$head <- renderTable(
req(input$file1),
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote),
if (input$disp == "head") {
return(head(df))
}
else
return(df)
)
#output$cols <- renderPrint(req(input$file1), colnames(output$head))
})
output$head <- renderTable(
req(input$file1),
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote),
if (input$disp == "head") {
return(head(df))
}
else
return(df)
)
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
shiny::runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
output$plot <- renderPlot(
{
browser()
req(input$plotType)
req(input$file1)
# ggplot(data = file_data, aes(renderText(input$x), renderText(input$y))) +
#                       renderText(input$plotType)
x_axis <- input$x
y_axis <- input$y
plot_type <- renderText({input$plotType})
ggplot(data = file_data(), aes(x_axis, y_axis)) + plot_type()
})
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/shiny/Practice1')
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child, 4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
0
q
q()
library(swirl)
swirl()
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
View(sqe)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
source('~/.active-rstudio-document')
downl(p)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
downl(p)
p <- ggplot(mtcars, aes(mpg, cyl)) + geom_point
p <- ggplot(mtcars, aes(mpg, cyl)) + geom_point()
summary(p)
names(p)
library(readr)
Big_Mart_Dataset_Sheet1 <- read_csv("C:/Users/Shrikishore.Hari/Desktop/R/R_Learning/Plotting/Big Mart Dataset - Sheet1.csv")
View(Big_Mart_Dataset_Sheet1)
p <- ggplot(Big_Mart_Dataset_Sheet1, aes(Item_Weight, Item_Visibility)) + geom_point()
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
View(college)
barplot(college$major_category)
table(college$major_category)
barplot(table(college$major_category))
apply(college[, c(16,17,18,19)], 1, sum)
plot(college$major_code, college$perc_college_jobs)
plot(college$major, college$perc_college_jobs)
install.packages(ggigraph)
install.packages(ggiraph)
install.packages("ggiraph")
library(ggiraph)
library(ggplot2)
library(ggiraph)
library(datasets)
data("mtcars")
qplot(cyl, mpg, mtcars)
ggplot(data = mtcars, aes(x = cyl, y = mpg)) + geom_point_interactive()
ggplot(data = mtcars, aes(x = cyl, y = mpg, tooltip = carname)) + geom_point_interactive()
View(mtcars)
datasets::mtcars
p <- ggplot(data = mtcars, aes(x = cyl, y = mpg, tooltip = carname)) + geom_point_interactive()
ggiraph(print(p))
p <- ggplot(data = mtcars, aes(x = cyl, y = mpg)) + geom_point_interactive()
ggiraph(print(p))
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, tooltip = cyl)) + geom_point_interactive()
ggiraph(print(p))
x <- rownames(mtcars)
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, tooltip = x)) + geom_point_interactive()
ggiraph(print(p))
barg <- ggplot(data = mtcars, aes(x = cyl, tooltip = rownames(mtcars))) + geom_bar_interactive()
ggiraph(barg)
ggiraph(print(barg))
install.packages(ggvis)
install.packages("ggvis")
?ggvis
alarm()
alarm()
library(shiny)
library(shinydashboard)
runApp('C:/Users/Shrikishore.Hari/Desktop/R/DMC_app/drill_down_take2/Bar_only')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/DMC_app/drill_down_take2/Bar_only')
install.packages("RInno")
library(RInno)
example_app(wd = getwd())
create_app(app_name = "Your appname", app_dir = "app")
compile_iss()
shiny::runApp('C:/Users/Shrikishore.Hari/Desktop')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/DMC_app/drill_down_take2/Bar_only')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/DMC_app/drill_down_take2/Bar_only')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/DMC_app/drill_down_take2/Bar_only')
runApp('C:/Users/Shrikishore.Hari/Desktop/R/DMC_app/drill_down_take2/Bar_only')
